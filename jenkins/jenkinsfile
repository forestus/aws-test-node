pipeline {
    agent any 
    stages {
        stage('Compile') {
            steps {
                sh 'sudo pm2 l || true'
                sh 'sudo pm2 stop all  || true'
                sh 'sudo pm2 delete all  || true'
                sh 'sudo rm -rf coverage'
                sh 'sudo rm -rf Build'
                sh 'sudo rm -rf coverage.zip'
                sh 'sudo rm -rf node_modules'
                sh 'ls'
                sh 'sudo mkdir Build'
                sh 'sudo rsync -Rr * ./Build'
                sh 'ls' 
                sh 'sudo npm install'
                sh 'sudo npm start'
            }
        }
        // stage('Run Unit Tests') {
        //     steps {
        //         echo 'Run unit tests from the source code'
        //         sh 'sudo npm run test:unit'
        //     }
        // }
        // stage('Run Integration Tests') {
        //     steps {
        //         echo 'Run only crucial integration tests from the source code' 
        //         sh 'sudo npm run test:integration'
        //     }
        // }
        // stage('Coverage') {
        //     steps {
        //         echo 'Save the assemblies generated from the compilation' 
        //         sh 'sudo npm run test:ci'
        //         sh 'sudo zip -q -r coverage.zip coverage'
        //         archiveArtifacts artifacts: 'coverage.zip', fingerprint: true
        //     }
        // }
        stage('Build') {
            steps {
                archiveArtifacts artifacts: 'coverage.zip', fingerprint: true
                sh 'cd Build'
                sh 'sudo rm -rf Build'
                sh 'sudo zip -q -r build.zip *'
                sh 'sudo mv build.zip /home/ubuntu'
            }
        }
        stage('Deploy') {
            when {
              expression {
                currentBuild.result == null || currentBuild.result == 'SUCCESS' 
              }
            }
            steps {
                echo 'Deployed'
                sh 'sudo rm -rf /home/ubuntu/*'
                sh 'cd /home/ubuntu'
                sh 'sudo mkdir node'
                sh 'sudo unzip -q build.zip -d /home/ubuntu/node'
                sh 'sudo rm -rf builded.zip'
                sh 'cd node'
                sh 'sudo npm install --production'
                sh 'sudo pm2 start index.js -f' 
            }
        }
    }
    post {
        always {
            emailext body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}"
        }
    }
}